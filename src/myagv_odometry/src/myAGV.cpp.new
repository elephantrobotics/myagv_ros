#include <vector>
#include "myagv_odometry/myAGV.h"

//const unsigned char ender[2] = { 0x0d, 0x0a };
const unsigned char header[2] = { 0x73, 0x73 };
//const int SPEED_INFO = 0xa55a;
//const int GET_SPEED = 0xaaaa;
//const double ROBOT_RADIUS = 105.00;
//const double ROBOT_LENGTH = 210.50;

boost::asio::io_service iosev;
//boost::asio::serial_port sp(iosev, "/dev/ttyUSB0");
boost::asio::serial_port sp(iosev, "/dev/ttyACM0");

boost::array<double, 36> odom_pose_covariance = {
    {1e-9, 0, 0, 0, 0, 0,
    0, 1e-3, 1e-9, 0, 0, 0,
    0, 0, 1e6, 0, 0, 0,
    0, 0, 0, 1e6, 0, 0,
    0, 0, 0, 0, 1e6, 0,
    0, 0, 0, 0, 0, 1e-9} };
boost::array<double, 36> odom_twist_covariance = {
    {1e-9, 0, 0, 0, 0, 0,
    0, 1e-3, 1e-9, 0, 0, 0,
    0, 0, 1e6, 0, 0, 0,
    0, 0, 0, 1e6, 0, 0,
    0, 0, 0, 0, 1e6, 0,
    0, 0, 0, 0, 0, 1e-9} };

void send()
{
    ;
}

void receive()
{
    ;
}

MyAGV::MyAGV()
{
    x = 0.0;
    y = 0.0;
    theta = 0.0;

    vx = 0.0;
    vy = 0.0;
    vtheta = 0.0;
}

MyAGV::~MyAGV()
{
    ;
}

bool MyAGV::init()
{
    sp.set_option(boost::asio::serial_port::baud_rate(115200));
    sp.set_option(boost::asio::serial_port::flow_control(boost::asio::serial_port::flow_control::none));
    sp.set_option(boost::asio::serial_port::parity(boost::asio::serial_port::parity::none));
    sp.set_option(boost::asio::serial_port::stop_bits(boost::asio::serial_port::stop_bits::one));
    sp.set_option(boost::asio::serial_port::character_size(8));

    ros::Time::init();
    currentTime = ros::Time::now();
    lastTime = ros::Time::now();

    pub = n.advertise<nav_msgs::Odometry>("odom", 50);

    return true;
}

bool MyAGV::readSpeed()
{
    int i, length = 0;
    unsigned char checkSum;
    unsigned char buf[40];

    boost::system::error_code er2;
    boost::asio::read(sp, boost::asio::buffer(buf), er2); // ready break

	if (er2 == boost::asio::error::eof){ 
	ROS_ERROR("asio error");
}


    int index = 0;
    for (index = 0; index < 40 - 17; ++index)
    {
        if(buf[index] == header[0] && buf[index] == header[1])
            break;
    }

    if (index == 40 - 18)
    {
        //ROS_ERROR("Received message header error!");
        return false;
    }

    index += 2;
    int check = 0;
    for (int i = 0; i < 15; ++i)
        check += buf[index + i];
    if (check % 256 != buf[index + 15])
        return false;

    vx = (static_cast<double>(buf[index]) - 128.0) * 0.01;
    vy = (static_cast<double>(buf[index + 1]) - 128.0) * 0.01;
    vtheta = (static_cast<double>(buf[index + 2]) - 128.0) * 0.01;

    ax = ((buf[index + 3] + buf[index + 4] * 256 ) - 10000) * 0.001;
    ay = ((buf[index + 5] + buf[index + 6] * 256 ) - 10000) * 0.001;
    az = ((buf[index + 7] + buf[index + 8] * 256 ) - 10000) * 0.001;

    wx = ((buf[index + 9] + buf[index + 10] * 256 ) - 10000) * 0.1;
    wy = ((buf[index + 11] + buf[index + 12] * 256 ) - 10000) * 0.1;
    wz = ((buf[index + 13] + buf[index + 14] * 256 ) - 10000) * 0.1;

    currentTime = ros::Time::now();

    double dt = (currentTime - lastTime).toSec();
    double delta_x = (vx * cos(theta) - vy * sin(theta)) * dt;
    double delta_y = (vx * sin(theta) + vy * cos(theta)) * dt;
    double delta_th = 2*vtheta * dt;

    x += delta_x;
    y += delta_y;
    theta += delta_th;
    lastTime = currentTime;

    // std::cout << "Received message is: " << vx << "," << vy << "," << vtheta << "|"
    //                                      << ax << "," << ay << "," << az << "|"
    //                                      << wx << "," << wy << "," << wz << std::endl;
    //std::cout << "current pos is: " << x << "," << y << "," << theta << std::endl;

    return true;
}

void MyAGV::writeSpeed(double movex, double movey, double rot)
{
    if (movex > 1.0) movex = 1.0;
    if (movex < -1.0) movex = -1.0;
    if (movey > 1.0) movey = 1.0;
    if (movey < -1.0) movey = -1.0;
    if (rot > 1.0) rot = 1.0;
    if (rot < -1.0) rot = -1.0;

    //char x_send = static_cast<char>(movex * 100) + 128;
    //char y_send = static_cast<char>(movey * 100) + 128;
    //char rot_send = static_cast<char>(rot * 100) + 128;
   //char check = x_send + y_send + rot_send;
    long x_send = static_cast<int>(movex * 100) + 128;
    long y_send = static_cast<int>(movey * 100) + 128;
    long rot_send = static_cast<int>(rot * 100) + 128;
    long check = x_send + y_send + rot_send;

    char buf[8] = { 0 };
    buf[0] = header[0];
    buf[1] = header[1];
    buf[2] = x_send;
    buf[3] = y_send;
    buf[4] = rot_send;
    buf[5] = check;
    
    boost::asio::write(sp, boost::asio::buffer(buf));
}

bool MyAGV::execute(double linearX, double linearY, double angularZ)
{
	
    writeSpeed(0.5 * linearX, 0.5 * linearY, 0.5 * angularZ);

	
    readSpeed(); // easy to report error 

    geometry_msgs::TransformStamped odom_trans;
    odom_trans.header.stamp = currentTime;
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_footprint";

    geometry_msgs::Quaternion odom_quat;
    odom_quat = tf::createQuaternionMsgFromYaw(theta); // THETA
    odom_trans.transform.translation.x = x; //X
    odom_trans.transform.translation.y = y; //Y

std::cout << "Received message is: " << x << "," << y << "," << theta << std::endl;


    odom_trans.transform.translation.z = 0.0;
    odom_trans.transform.rotation = odom_quat;

    odomBroadcaster.sendTransform(odom_trans);

    nav_msgs::Odometry msgl;
    msgl.header.stamp = currentTime;
    msgl.header.frame_id = "odom";

    msgl.pose.pose.position.x = x;
    msgl.pose.pose.position.y = y;
    msgl.pose.pose.position.z = 0.0;
    msgl.pose.pose.orientation = odom_quat;
    msgl.pose.covariance = odom_pose_covariance;

    msgl.child_frame_id = "base_footprint";
    msgl.twist.twist.linear.x = vx;
    msgl.twist.twist.linear.y = vy;
    msgl.twist.twist.angular.z = vtheta;
    msgl.twist.covariance = odom_twist_covariance;

    pub.publish(msgl);
}
