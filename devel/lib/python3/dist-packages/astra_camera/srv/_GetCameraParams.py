# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from astra_camera/GetCameraParamsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetCameraParamsRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "astra_camera/GetCameraParamsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCameraParamsRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from astra_camera/GetCameraParamsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetCameraParamsResponse(genpy.Message):
  _md5sum = "82a0d82977d6826869eb4772054042e0"
  _type = "astra_camera/GetCameraParamsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32[4] l_intr_p
float32[4] r_intr_p
float32[9] r2l_r
float32[3] r2l_t
float32[5] l_k
float32[5] r_k
bool success
string message

"""
  __slots__ = ['l_intr_p','r_intr_p','r2l_r','r2l_t','l_k','r_k','success','message']
  _slot_types = ['float32[4]','float32[4]','float32[9]','float32[3]','float32[5]','float32[5]','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       l_intr_p,r_intr_p,r2l_r,r2l_t,l_k,r_k,success,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCameraParamsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.l_intr_p is None:
        self.l_intr_p = [0.] * 4
      if self.r_intr_p is None:
        self.r_intr_p = [0.] * 4
      if self.r2l_r is None:
        self.r2l_r = [0.] * 9
      if self.r2l_t is None:
        self.r2l_t = [0.] * 3
      if self.l_k is None:
        self.l_k = [0.] * 5
      if self.r_k is None:
        self.r_k = [0.] * 5
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
    else:
      self.l_intr_p = [0.] * 4
      self.r_intr_p = [0.] * 4
      self.r2l_r = [0.] * 9
      self.r2l_t = [0.] * 3
      self.l_k = [0.] * 5
      self.r_k = [0.] * 5
      self.success = False
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_4f().pack(*self.l_intr_p))
      buff.write(_get_struct_4f().pack(*self.r_intr_p))
      buff.write(_get_struct_9f().pack(*self.r2l_r))
      buff.write(_get_struct_3f().pack(*self.r2l_t))
      buff.write(_get_struct_5f().pack(*self.l_k))
      buff.write(_get_struct_5f().pack(*self.r_k))
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 16
      self.l_intr_p = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.r_intr_p = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 36
      self.r2l_r = _get_struct_9f().unpack(str[start:end])
      start = end
      end += 12
      self.r2l_t = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 20
      self.l_k = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 20
      self.r_k = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.l_intr_p.tostring())
      buff.write(self.r_intr_p.tostring())
      buff.write(self.r2l_r.tostring())
      buff.write(self.r2l_t.tostring())
      buff.write(self.l_k.tostring())
      buff.write(self.r_k.tostring())
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 16
      self.l_intr_p = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.r_intr_p = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 36
      self.r2l_r = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      start = end
      end += 12
      self.r2l_t = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 20
      self.l_k = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=5)
      start = end
      end += 20
      self.r_k = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=5)
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class GetCameraParams(object):
  _type          = 'astra_camera/GetCameraParams'
  _md5sum = '82a0d82977d6826869eb4772054042e0'
  _request_class  = GetCameraParamsRequest
  _response_class = GetCameraParamsResponse
